// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`class class-constructor.ts 1`] = `
### Class \`ClassConstructor\`

This is ClassConstructor documentation.

\`\`\`javascript
const instance = new ClassConstructor("foo", 1);
\`\`\`

#### Constructors

Creates new instance.

\`\`\`typescript
class ClassConstructor {
  public constructor(foo: string, bar: number);
}
\`\`\`

###### Parameters

- **foo**: \`string\`
  This is \`foo\` argument.
- **bar**: \`number\`
  And this is \`bar\` argument.

`;

exports[`class class-docs.ts 1`] = `
### Class \`Calculator\`

#### Methods

##### \`add\`

\`\`\`typescript
class Calculator {
  public add(numbers: number[]): number;
}
\`\`\`

###### Parameters

- **numbers**: \`number[]\`

###### Returns

- \`number\`

##### \`subtract\`

\`\`\`typescript
class Calculator {
  public subtract(numbers: number[]): number;
}
\`\`\`

###### Parameters

- **numbers**: \`number[]\`

###### Returns

- \`number\`

`;

exports[`class class-extends.ts 1`] = `
### Class \`ClassExtends\`

#### Extends \`A\`

`;

exports[`class class-implements.ts 1`] = `
### Class \`ClassImplements\`

#### Implements

- \`A\`
- \`B\`

#### Properties

##### \`a\`

\`\`\`typescript
class ClassImplements {
  public a: string;
}
\`\`\`

##### \`b\`

\`\`\`typescript
class ClassImplements {
  public b: number;
}
\`\`\`

`;

exports[`class class-methods.ts 1`] = `
### Class \`ClassMethods\`

This is class methods documentation.

\`\`\`javascript
const instance = new ClassMethods();

instance.a().catch(() => {
  process.exit(1);
});
\`\`\`

#### Methods

##### \`a\`

This is public method \`a\`.

\`\`\`javascript
const instance = new ClassMethods();

instance.a().catch(() => {
  process.exit(1);
});
\`\`\`

\`\`\`typescript
class ClassMethods {
  public a(): Promise<void>;
}
\`\`\`

###### Returns

- \`Promise<void>\`
  $This is return value docs for Promise<void>.

##### \`b\`

This is protected method \`b\`.

You can extend class and call it whenever you want.

\`\`\`javascript
import { ClassMethods } from ".";

export class MyClassMethods extends ClassMethods {
  constructor() {
    super();

    this.b(1).catch(() => {
      process.exit(1);
    });
  }
}
\`\`\`

Or you can override it.

\`\`\`javascript
import { ClassMethods } from ".";

export class MyClassMethods extends ClassMethods {
  protected b(a: number): Promise<string> {
    return super.b(a).catch(() => {
      process.exit(1);
    })
  }
}
\`\`\`

\`\`\`typescript
class ClassMethods {
  protected b(a: number): Promise<string>;
}
\`\`\`

###### Parameters

- **a**: \`number\`
  is very useful parameter.

###### Returns

- \`Promise<string>\`
  $This is return value docs for Promise<string>.

`;

exports[`class class-methods-external-result.ts 1`] = `
### Class \`ClassMethodsExternalResult\`

#### Methods

##### \`createProgram\`

\`\`\`typescript
class ClassMethodsExternalResult {
  public createProgram(): ts.Program;
}
\`\`\`

###### Returns

- \`ts.Program\`

`;

exports[`class class-mixed-extends-and-implements.ts 1`] = `
### Class \`ClassMixedExtendsAndImplements\`

#### Extends \`A\`

#### Implements

- \`B\`
- \`C\`

`;

exports[`class class-properties.ts 1`] = `
### Class \`ClassProperties\`

#### Properties

##### \`a\`

\`\`\`typescript
class ClassProperties {
  public a: number;
}
\`\`\`

##### \`d\`

\`\`\`typescript
class ClassProperties {
  public d: () => string | number;
}
\`\`\`

##### \`e\`

\`\`\`typescript
class ClassProperties {
  public e: (a: number) => number;
}
\`\`\`

##### \`b\`

\`\`\`typescript
class ClassProperties {
  protected b: string | number;
}
\`\`\`

`;
